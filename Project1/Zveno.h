#pragma once

//Этот класс представляет собой базовый элемент односвязного списка
//Используется для реализации структуры данных очередь

class Zveno {
private:
    int info;      // Информация, хранящаяся в узле.
    Zveno* next;   // Указатель на следующий узел в односвязном списке.

public:
    // Конструктор класса Zveno.
    Zveno(int info = 0) {
        this->info = info;  // Инициализация информации узла переданным значением.
        next = nullptr;     // Инициализация указателя на следующий узел нулевым значением.
    }

    // Деструктор класса Zveno.
    ~Zveno() {
        next = 0;  // Установка указателя на следующий узел в нуль.
    }

    // Конструктор копирования.
    Zveno(const Zveno& tmp) {
        info = tmp.info;  // Копирование информации из другого узла.
        next = 0;         // Инициализация указателя на следующий узел нулевым значением.
    }

    // Перегруженный оператор присваивания.
    Zveno& operator=(Zveno tmp) {
        info = tmp.info;  // Присваивание информации из другого узла.
        return *this;
    }

    // Метод для получения информации из узла.
    int poluchim_information() {
        return info;
    }

    // Метод для получения указателя на следующий узел.
    Zveno* poluchim_next_uzel() {
        return next;
    }

    // Метод для установки нового значения информации в узле.
    void ustanivim_information(int val) {
        info = val;
    }

    // Метод для установки указателя на следующий узел.
    void ustanovim_next_uzel(Zveno* tmp) {
        next = tmp;
    }
};